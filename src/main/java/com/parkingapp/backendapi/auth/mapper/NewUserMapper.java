package com.parkingapp.backendapi.auth.mapper;

import com.parkingapp.backendapi.auth.dto.RegisterRequestDto;
import com.parkingapp.backendapi.user.entity.User;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;


@Mapper(componentModel = "spring")
public interface NewUserMapper {

  // data safe to map from dto
  @Mapping(target = "firstName", source = "dto.firstName")
  @Mapping(target = "lastName", source = "dto.lastName")
  @Mapping(target = "dateOfBirth", source = "dto.dateOfBirth")
  @Mapping(target = "email", source = "dto.email")

  // set dynamically by service layer
  @Mapping(target = "hashedPassword", ignore = true)

  // set dynamically by service layer
  @Mapping(target = "accountType", ignore = true)

  // Explicitly ignore the ID, as it's generated by the database
  @Mapping(target = "id", ignore = true)

  // Explicitly ignore authorities, as they are derived from accountType
  @Mapping(target = "authorities", ignore = true)

  @Mapping(target = "createdOn", expression = "java(java.time.Instant.now())")

  /* Checking the updatedOn allows us to do some security things, specifically force a user to update their password.
    setting the updatedOn on initial creation allows:
    1. avoiding null check
    2. if null, use createdOn time instead

    so setting this value here seems optimal
  */
  @Mapping(target = "updatedOn", expression = "java(java.time.Instant.now())")

  @Mapping(target = "agreedToTerms", source = "dto.agreedToTerms")
  User toEntity(RegisterRequestDto dto);
}
